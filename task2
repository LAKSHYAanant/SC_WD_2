<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stopwatch Web Application</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        /* Custom styles to complement Tailwind CSS */
        body {
            font-family: 'Inter', sans-serif;
        }
        .font-mono {
            font-family: 'Roboto Mono', monospace;
        }
        /* Custom scrollbar for a better look in dark mode */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #1f2937; /* gray-800 */
        }
        ::-webkit-scrollbar-thumb {
            background: #4b5563; /* gray-600 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280; /* gray-500 */
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex flex-col items-center justify-center min-h-screen p-4">

    <!-- Main Stopwatch Container -->
    <div class="w-full max-w-md bg-gray-800 rounded-2xl shadow-2xl p-6 md:p-8 space-y-8">
        
        <!-- Header -->
        <header class="text-center">
            <h1 class="text-3xl font-bold text-cyan-400">Stopwatch</h1>
            <p class="text-gray-400 mt-1">Measure and record time intervals accurately.</p>
        </header>

        <!-- Time Display -->
        <div id="display" class="text-6xl md:text-7xl font-mono text-center tracking-wider py-4 bg-gray-900 rounded-lg">
            00:00:00<span class="text-4xl md:text-5xl text-gray-500">.000</span>
        </div>

        <!-- Action Buttons -->
        <div class="grid grid-cols-2 gap-4">
            <button id="lapResetBtn" class="py-3 px-4 rounded-lg text-lg font-semibold bg-gray-600 hover:bg-gray-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed" disabled>Lap</button>
            <button id="startStopBtn" class="py-3 px-4 rounded-lg text-lg font-semibold bg-cyan-500 hover:bg-cyan-400 text-gray-900 transition-colors duration-200">Start</button>
        </div>

        <!-- Laps List -->
        <div id="lapsContainer" class="space-y-3 max-h-60 overflow-y-auto pr-2">
            <!-- Lap times will be inserted here dynamically -->
        </div>

    </div>

    <!-- Footer -->
    <footer class="mt-8 text-center text-gray-500">
        <p>Designed with precision.</p>
    </footer>

    <script>
        // DOM Element References
        const display = document.getElementById('display');
        const startStopBtn = document.getElementById('startStopBtn');
        const lapResetBtn = document.getElementById('lapResetBtn');
        const lapsContainer = document.getElementById('lapsContainer');

        // Stopwatch State Variables
        let startTime;
        let updatedTime;
        let difference;
        let timerInterval;
        let running = false;
        let savedTime = 0;
        let lapCounter = 0;

        // --- Core Functions ---

        function startTimer() {
            if (!running) {
                startTime = new Date().getTime() - savedTime;
                timerInterval = setInterval(updateDisplay, 10); // Update every 10ms for accuracy
                running = true;
                updateButtonStates();
            }
        }

        function pauseTimer() {
            if (running) {
                clearInterval(timerInterval);
                savedTime = new Date().getTime() - startTime;
                running = false;
                updateButtonStates();
            }
        }

        function resetTimer() {
            clearInterval(timerInterval);
            running = false;
            savedTime = 0;
            difference = 0;
            lapCounter = 0;
            display.innerHTML = '00:00:00<span class="text-4xl md:text-5xl text-gray-500">.000</span>';
            lapsContainer.innerHTML = '';
            updateButtonStates();
        }

        function recordLap() {
            if (running) {
                lapCounter++;
                const lapTime = display.innerHTML;
                const lapElement = document.createElement('div');
                lapElement.className = 'flex justify-between items-center bg-gray-700 p-3 rounded-md text-lg';
                lapElement.innerHTML = `
                    <span class="font-medium text-gray-400">Lap ${lapCounter}</span>
                    <span class="font-mono">${lapTime.replace(/<span.*span>/, '')}</span>
                `;
                lapsContainer.prepend(lapElement); // Add new laps to the top
            }
        }

        // --- Helper & UI Functions ---

        function updateDisplay() {
            updatedTime = new Date().getTime();
            difference = updatedTime - startTime;

            const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((difference % (1000 * 60)) / 1000);
            const milliseconds = Math.floor((difference % 1000) / 1);

            // Format with leading zeros
            const formattedHours = String(hours).padStart(2, '0');
            const formattedMinutes = String(minutes).padStart(2, '0');
            const formattedSeconds = String(seconds).padStart(2, '0');
            const formattedMilliseconds = String(milliseconds).padStart(3, '0');

            display.innerHTML = `${formattedHours}:${formattedMinutes}:${formattedSeconds}<span class="text-4xl md:text-5xl text-gray-500">.${formattedMilliseconds}</span>`;
        }

        function updateButtonStates() {
            if (running) {
                // Timer is running
                startStopBtn.textContent = 'Pause';
                startStopBtn.classList.remove('bg-cyan-500', 'hover:bg-cyan-400');
                startStopBtn.classList.add('bg-red-500', 'hover:bg-red-400');
                
                lapResetBtn.textContent = 'Lap';
                lapResetBtn.disabled = false;
            } else {
                // Timer is paused or stopped
                startStopBtn.textContent = 'Start';
                startStopBtn.classList.remove('bg-red-500', 'hover:bg-red-400');
                startStopBtn.classList.add('bg-cyan-500', 'hover:bg-cyan-400');
                
                if (savedTime > 0) {
                    lapResetBtn.textContent = 'Reset';
                    lapResetBtn.disabled = false;
                } else {
                    lapResetBtn.textContent = 'Lap';
                    lapResetBtn.disabled = true;
                }
            }
        }

        // --- Event Listeners ---

        startStopBtn.addEventListener('click', () => {
            if (running) {
                pauseTimer();
            } else {
                startTimer();
            }
        });

        lapResetBtn.addEventListener('click', () => {
            if (running) {
                recordLap();
            } else {
                if(savedTime > 0) {
                    resetTimer();
                }
            }
        });

    </script>
</body>
</html>
